<?php

module_load_include('inc', 'ibpcl', 'parsecsv');
module_load_include('inc', 'ibpcl', 'fpdf');
drupal_add_css(drupal_get_path('module','ibpcl'). '/ibpcl.css');
drupal_add_js(drupal_get_path('module', 'ibpcl') .'/scripts/jquery.dataTables.js');
drupal_add_js(drupal_get_path('module', 'ibpcl') .'/scripts/ibpcl.js');

/**
* Implementation of hook_node_info()
**/
function ibpcl_node_info() {
  return array(
    'ibpcl' => array(
      'name' => t('IBP Checklist'),
      'module' => 'ibpcl',
      'description' => 'A species checklist',
    ),
  );
}

/**
 * Given a raw checklist, return the number of entities present inside it
 */
function getNumEntities($raw_checklist)  {
  $count = isset($raw_checklist)?count(explode("\n", $raw_checklist))-2:-1;
  return $count;
}

/**
* Implementation for hook_form()
**/
function ibpcl_form(&$node, $form_state) {
  $type = node_get_types('type',$node);
  $taxa_names = _ibpcl_get_taxa_names();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#description' => 'The name of this checklist',
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['taxa'] = array(
    '#type' => 'select',
    '#title' => t('Taxa'),
    '#description' => 'The Taxa in this checklist',
    '#required' => TRUE,
    '#options' => $taxa_names,
    '#default_value' => isset($node->taxa) ? $node->taxa:'',
  );

  $form['tables'] = array(
    '#type' => 'select',
    '#title' => 'Resource Tables',
    '#description' => 'The Resource tables to use for this checklist',
    '#required' => FALSE,
    '#multiple' => TRUE,
    '#size' => 5,
    '#options' => _get_resource_tables(),
    '#default_value' => isset($node->biogeography) ? $node->biogeography:array(),
  );

  $form['geography'] = array(
    '#type' => 'fieldset',
    '#title' => 'Geography',
    '#collapsible' => TRUE,
  );

  $form['geography']['place_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Place Name',
    '#description' => 'Ex: Dandeli Wild Life Sanctuary, or Bangalore North',
    '#required' => TRUE,
    '#default_value' => isset($node->place_name) ? $node->place_name:'',
  );

  $form['geography']['all_india'] = array(
    '#type' => 'checkbox',
    '#title' => t('All India?'),
    '#description' => 'Is this an all India list?',
    '#required' => TRUE,
    '#return_value' => 'yes',
    '#default_value' => isset($node->all_india) ? $node->all_india:0,
  );

  $form['geography']['biogeography'] = array(
    '#type' => 'select',
    '#title' => 'Biogeographic Region',
    '#description' => 'The type of region this checklist describes',
    '#required' => FALSE,
    '#multiple' => TRUE,
    '#size' => 5,
    '#options' => _get_biogeographic_regions(),
    '#default_value' => isset($node->biogeography) ? $node->biogeography:array(),
  );

  $form['geography']['states'] = array(
    '#type' => 'textfield',
    '#title' => t('State(s)'),
    '#description' => 'The states / UTs that this list describes. Separate multiple states with commas (\',\')',
    '#autocomplete_path' => 'ibpcl/autocomplete/states',
    '#required' => FALSE,
    '#default_value' => isset($node->states) ? $node->states : '',
  );

  $form['geography']['districts'] = array(
    '#type' => 'textfield',
    '#title' => t('District(s)'),
    '#description' => 'The districts that this list describes. Separate multiple districts with commas (\',\')',
    '#autocomplete_path' => 'ibpcl/autocomplete/districts',
    '#required' => FALSE,
    '#default_value' => isset($node->districts) ? $node->districts : '',
  );

  $form['geography']['taluks'] = array(
    '#type' => 'textfield',
    '#title' => t('Taluk(s)'),
    '#description' => 'The taluks that this list describes. Separate multiple taluks with commas (\',\')',
    '#autocomplete_path' => 'ibpcl/autocomplete/taluks',
    '#required' => FALSE,
    '#default_value' => isset($node->taluks) ? $node->taluks : '',
  );

  $form['temporal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Time Period',
    '#collapsible' => TRUE,
  );

  $form['temporal']['from_date'] = array(
    '#type' => 'textfield',
    '#title' => t('From Date'),
    '#description' => 'The date from which data has been collected. Format: YYYY-MM-DD',
    '#required' => FALSE,
    '#default_value' => isset($node->from_date) ? $node->from_date : '',
  );

  $form['temporal']['to_date'] = array(
    '#type' => 'textfield',
    '#title' => t('To Date'),
    '#description' => 'The date until which data has been collected. Format: YYYY-MM-DD',
    '#required' => FALSE,
    '#default_value' => isset($node->to_date) ? $node->to_date : '',
  );

  $form['temporal']['publication'] = array(
    '#type' => 'textfield',
    '#title' => t('Date of Publication'),
    '#description' => 'The date on which this checklist was published. Format: YYYY-MM-DD',
    '#required' => FALSE,
    '#default_value' => isset($node->publication) ? $node->publication : '',
  );

  $form['temporal']['last_updated'] = array(
    '#type' => 'textfield',
    '#title' => t('Date Updated'),
    '#description' => 'The date on which this was last updated. Format: YYYY-MM-DD',
    '#required' => FALSE,
    '#default_value' => isset($node->last_updated) ? $node->last_updated : '',
  );

  $form['credits'] = array(
    '#type' => 'fieldset',
    '#title' => 'Credits',
    '#collapsible' => TRUE,
  );

  $form['credits']['attribution'] = array(
    '#type' => 'textarea',
    '#title' => 'Attribution',
    '#description' => 'Attribution for this checklist',
    '#required' => FALSE,
    '#default_value' => isset($node->attribution) ? $node->attribution : '',
  );
  
  $form['credits']['link'] = array(
    '#type' => 'textarea',
    '#title' => t('Source'),
    '#description' => 'The link to the checklist, or to the uploaded file',
    '#required' => FALSE,
    '#default_value' => isset($node->link) ? $node->link : '',
  );

  $form['credits']['license'] = array(
    '#type' => 'select',
    '#title' => t('Creative Commons License'),
    '#description' => 'The Creative Commons License, this work is licensed under',
    '#required' => TRUE,
    '#options' => _get_cc_types(),
    '#default_value' => isset($node->license) ? $node->license: array(),
  );

 $form['numchecklist'] = array(
    '#type' => 'textfield',
    '#title' => 'Number of entries in the Checklist',
    '#description' => 'Shows the number of entries in this checklist, as identified by the system',
    '#required' => TRUE,
    '#default_value' => getNumEntities($node->raw_checklist),
    '#value' => getNumEntities($node->raw_checklist),
    '#disabled' => TRUE,
  );

  $form['checklist'] = array(
    '#type' => 'fieldset',
    '#title' => 'Checklist',
    '#collapsible' => TRUE,
  );

  $form['checklist']['information'] = array(
    '#type' => 'textarea',
    '#title' => t('Checklist Information'),
    '#description' => 'Any information about this checklist',
    '#required' => FALSE,
    '#default_value' => isset($node->information) ? $node->information : '',
  );

  $form['checklist']['raw_checklist'] = array(
    '#type' => 'textarea',
    '#title' => t('Raw checklist'),
    '#description' => 'Tab separated values for the checklist with optional columns. please use the format specified.',
    '#required' => true,
    '#rows' => 15,
    '#default_value' => isset($node->raw_checklist) ? $node->raw_checklist : '',
  );

  $form['checklist']['references'] = array(
    '#type' => 'textarea',
    '#title' => t('References'),
    '#description' => 'References for this checklist',
    '#required' => FALSE,
    '#default_value' => isset($node->references) ? $node->references : '',
  );

  return $form;
}

/**
* Implementation of hook_load
**/
function ibpcl_load($node){
  $checklist = db_fetch_object(db_query('select title, attribution, license, info, all_india, geography_given_name, from_date, to_date, last_updated, publication_date,raw_checklist, link, checklist_references, contributed_by from {ibp_checklist} where id = %d', array($node->nid)));

  // If there are mismatches in the db field and the actual node property
  $checklist->information = $checklist->info;
  $checklist->references = $checklist->checklist_references;
  $checklist->publication = $checklist->publication_date;

  
  // Fetch states
  $checklist->states = _ibpcl_get($node->nid, 'states');
  // Districts
  $checklist->districts = _ibpcl_get($node->nid, 'districts');
  // Taluks
  $checklist->taluks = _ibpcl_get($node->nid, 'taluks');
  // Biogeography
  $checklist->biogeography = _ibpcl_get($node->nid, 'biogeography_values');
  // Place_name
  $checklist->place_name = $checklist->geography_given_name;
  // License
  $checklist->cc_license = _show_license($checklist->license);
  // Checklist
  $checklist->checklist = _ibpcl_raw_checklist($node->nid, $checklist->raw_checklist);
  // Tables
  $checklist->tables = _ibpcl_get_tables_for_node($node->nid);
  // Taxa
  $checklist->taxa = _ibpcl_get($node->nid, 'taxa');

  // Check if there is a CSV file, if not, we'll create one
  if(! file_scan_directory(file_directory_path().'/checklists/csv','checklist_'.$node->nid.'.csv')) {
    $csv = new parseCSV();
    $csv->auto($checklist->raw_checklist);
    $csv->save(file_directory_path().'/checklists/csv/checklist_'.$node->nid.'.csv');
  }
  else
  {
    unlink(file_directory_path().'/checklists/csv','checklist_'.$node->nid.'.csv');
    $csv = new parseCSV();
    $csv->auto($checklist->raw_checklist);
    $csv->save(file_directory_path().'/checklists/csv/checklist_'.$node->nid.'.csv');
  }

  return $checklist;
}

/**
* Implementation of hook_view
**/
function ibpcl_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['checklist_display'] = array(
    '#value' => theme('ibpcl_checklist_info', $node),
  );
  return $node;
}

/**
* Imnplementation of hook_theme
**/
function ibpcl_theme() {
  return array(
    'ibpcl_checklist_info' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
* Custom theme function
**/
function theme_ibpcl_checklist_info($node) {
  $output = '<div id="ibpcl_body">';

  // Attribution
  $output .= '<div id="ibp_credits" class="ibp_part">';

  if($node->attribution){
    $output .= '<div class="label">Attribution</div>';
    $output .= '<div class="value">'.$node->attribution.'</div>';
  }
  $output .= '<div class="label licenseLabel">License</div>';
  $output .= '<div class="value">'.$node->cc_license.'</div>';


  $output .= '</div>';


  // Geography and Taxa
  $output .= '<div id="ibp_taxa" class="ibp_part">';
  $output .= '<h3>Taxa</h3>';
  $output .= '<div class="value">'.$node->taxa.'</div>';
  $output .= '</div>';
  $output .= '<div id="ibp_geography" class="ibp_part">';
  $output .= '<h3>Geography</h3>';
  $output .= '<div class="label">Place Name</div>';
  $output .= '<div class="value">'.check_plain($node->place_name).'</div>';
  if($node->all_india != 'yes') {
    if($node->states != '') {
      $output .= '<div class="label">State(s)</div>';
      $output .= '<div class="value">'.check_plain($node->states).'</div>';
    }
    if($node->districts != '') {
      $output .= '<div class="label">District(s)</div>';
      $output .= '<div class="value">'.$node->districts.'</div>';
    }
    if($node->taluks != '') {
      $output .= '<div class="label">Taluk(s)</div>';
      $output .= '<div class="value">'.$node->taluks.'</div>';
    }
    if($node->biogeography != '') {
      $output .= '<div class="label">Biogeographic Zones</div>';
      $output .= '<div class="value">'.$node->biogeography.'</div>';
    }
  }
  else {
    $output .= '<div class="label">Region</div>';
    $output .= '<div class="value">All India</div>';
  }
  $output .= '</div>';

  $output .= '<table class="checklistMetadata">';
  // Time period
  if(isset($node->from_date) && !empty($node->from_date)) {
    $output .= '<tr>';
    $output .= '<td class="key">From Date</td>';
    $output .= '<td class="value">'.$node->from_date.'</td>';
    $output .= '</tr>';
  }
  if(isset($node->to_date) && !empty($node->to_date)) {
    $output .= '<tr>';
    $output .= '<td class="key">To Date</td>';
    $output .= '<td class="value">'.$node->to_date.'</td>';
    $output .= '</tr>';
  }
  if(isset($node->publication_date) && !empty($node->publication_date)) {
    $output .= '<tr>';
    $output .= '<td class="key">Publication Date</td>';
    $output .= '<td class="value">'.$node->publication_date .'</td>';
    $output .= '</tr>';
  }
  if(isset($node->last_updated) && !empty($node->last_updated)) {
    $output .= '<tr>';
    $output .= '<td class="key">Date Updated</td>';
    $output .= '<td class="value">'.$node->last_updated.'</td>';
    $output .= '</tr>';
  }
  // Source and contributed by
  if($node->contributed_by) {
    $output .= '<tr>';
    $output .= '<td class="key">Contributed by</td>';
    $user = user_load($node->contributed_by);
    $output .= '<td class="value"><a href="'.base_path().'user/'.$node->contributed_by.'">'.$user->name.'</a></td>';
    $output .= '</tr>';
  }
  if($node->link){
    $output .= '<tr>';
    $output .= '<td class="key">Source</td>';
    $output .= '<td class="value">'.check_markup($node->link,1).'</td>';
    $output .= '</tr>';
  }
  $output .= '</table>';


  // Checklist
   $output .= '<div id="ibp_checklist" class="ibp_part">';
   $output .= '<h3>Checklist</h3>';

  // Info
  $output .= '<div id="ibp_checklist_info" class="ibp_part">';
  if($node->information) {
    $output .= '<div>';
    $output .= '<div class="label"><a href="#" class="toggle">+</a><a href="#" class="toggle" style="display:none">-</a> Checklist Information</div>';
    $output .= '<div class="value" style="display:none">'.check_markup($node->information,1).'</div>';
    $output .= '</div>';
  }
  $output .= '</div>';



  
  if($node->raw_checklist) {
    $output .= '<div class="label">&nbsp;</div>';
    $output .= '<div class="value">'.$node->checklist.'<br/><br/></div>';
  }

  $output .= '<div class="label">Download</div>';

  $output .= '<a href="'.base_path().file_directory_path().'/checklists/csv/checklist_'.$node->nid.'.csv">';
  $output .= '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/csv.png" alt="CSV"/>';
  $output .= '</a>';

 // $output .= '<a href="'.base_path().'printpdf/'.$node->nid.'">';
  $output .= '<a href="'.base_path().'make_pdf/'.$node->nid.'">';
  $output .= '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/pdf.png" alt="PDF"/>';
  $output .= '</a>';


  $output .= '</div>';

  // References
  $output .= '<div id="ibp_checklist_references" class="ibp_part">';
  if($node->checklist_references) {
    $output .= '<div>';
    $output .= '<div class="label"><a href="#" class="toggle">+</a><a href="#" class="toggle" style="display:none">-</a> References</div>';
    $output .= '<div class="value" style="display:none">'.check_markup($node->checklist_references,1).'</div>';
    $output .= '</div>';
  }

  $output .= '</div>';


  $output .= '</div>';

  return $output;
}

/**
* Helper function to get the biogeographic regions
**/
function _get_biogeographic_regions(){
  $regions = array();

  $sql = 'select __mlocate__id, biogeoprov from {lyr_156_india_biogeographic}';
  $result = db_query($sql);
  while($row = db_fetch_array($result)) {
    $regions[$row['__mlocate__id']] = $row['biogeoprov'];
  }

  return $regions;
}

/**
* Helper function to get the CC Licenses
**/
function _get_cc_types(){
  $sql = 'select * from {ibp_cc_types}';
  $result = db_query($sql);
  $cc_types = array();
  while($row = db_fetch_object($result)) {
    $cc_types[$row->id] = $row->name;
  }
  return $cc_types;
}

/**
* Implementation of hook_insert()
**/
function ibpcl_insert($node) {
  if($node->type == 'ibpcl') {
    $sql = 'insert into {ibp_checklist}(id,title, info, all_india, geography_given_name,from_date, to_date, publication_date, last_updated, attribution, raw_checklist, link, checklist_references, license, processed_checklist, contributed_by) values(%d,\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\',\'%s\', \'%s\', %d)';
    global $user;
    $data_array = array($node->nid, 
    $node->title, 
    $node->information, 
    $node->all_india, 
    $node->place_name, 
    $node->from_date, 
    $node->to_date, 
    $node->publication, 
    $node->last_updated, 
    $node->attribution, 
    $node->raw_checklist, 
    $node->link, 
    $node->references, 
    $node->license, 
    _ibpcl_insert_checklist($node, $node->raw_checklist),
    $user->uid,
    );
    db_query($sql,$data_array);
    // States
    _insert_ibpcl_ids($node->nid, $node->states, 'states');
    // Districts
    _insert_ibpcl_ids($node->nid, $node->districts,'districts');
    // Taluks
    _insert_ibpcl_ids($node->nid, $node->taluks,'taluks');
    // Taxa
    _insert_ibpcl_ids($node->nid, $node->taxa, 'taxa');
    // Biogeographic regions
    _ibpcl_insert_biogeography($node->nid, $node->biogeography);
    // Resource tables
    _ibpcl_insert_tables($node->nid, $node->tables);
  }
}



/**
* Implementation of hook_update
**/
function ibpcl_update($node) {
  // Update the ibp_checklists
  $sql = 'update {ibp_checklist} set title = \'%s\', info = \'%s\', all_india = \'%s\', geography_given_name = \'%s\', from_date = \'%s\', to_date = \'%s\', publication_date = \'%s\', last_updated = \'%s\', attribution = \'%s\', raw_checklist = \'%s\', link = \'%s\', checklist_references = \'%s\', license = %d, processed_checklist = \'%s\' where id = %d';

  $data = array(
    $node->title,
    $node->information,
    $node->all_india,
    $node->place_name,
    $node->from_date,
    $node->to_date,
    $node->publicaton,
    $node->last_updated,
    $node->attribution,
    $node->raw_checklist,
    $node->link,
    $node->references,
    $node->license,
    _ibpcl_insert_checklist($node->nid, $node->raw_checklist),
    $node->nid,
  );
  db_query($sql, $data);

  // Delete old values for state, district, taluk and taxa
  $sql = 'delete from {ibp_checklist_states} where checklist_id = %d';
  $data = array(
    $node->nid,
  );
  db_query($sql, $data);

  $sql = 'delete from {ibp_checklist_districts} where checklist_id = %d';
  $data = array(
    $node->nid,
  );
  db_query($sql, $data);

  $sql = 'delete from {ibp_checklist_taluks} where checklist_id = %d';
  $data = array(
    $node->nid,
  );
  db_query($sql, $data);

  $sql = 'delete from {checklist_taxa} where checklist_id = %d';
  $data = array(
    $node->nid,
  );
  db_query($sql, $data);

  $sql = 'delete from {checklist_regions} where checklist_id = %d';
  $data = array(
    $node->nid,
  );
  db_query($sql, $data);
  

  // Insert new values for state, district, taluk and taxa
  _insert_ibpcl_ids($node->nid, $node->states, 'states');
  _insert_ibpcl_ids($node->nid, $node->districts , 'districts');
  _insert_ibpcl_ids($node->nid, $node->taluks, 'taluks');
  _insert_ibpcl_ids($node->nid, $node->taxa, 'taxa');

  _ibpcl_insert_biogeography($node->nid, $node->biogeography);

}

/**
* Implementation of hook_delete
**/
function ibpcl_delete(&$node) {
  // Delete taluk, district, state, biogeographic regions
  $sql = 'delete from {ibp_checklist_districts} where checklist_id = %d';
  $data_array = array(
    $node->nid,
  );
  db_query($sql, $data_array);

  $sql = 'delete from {ibp_checklist_states} where checklist_id = %d';
  $data_array = array(
    $node->nid,
  );
  db_query($sql, $data_array);

  $sql = 'delete from {ibp_checklist_taluks} where checklist_id = %d';
  $data_array = array(
    $node->nid,
  );
  db_query($sql, $data_array);

  $sql = 'delete from {checklist_regions} where checklist_id = %d';
  $data_array = array(
    $node->nid,
  );
  db_query($sql, $data_array);

  $sql = 'delete from {checklist_taxa} where checklist_id = %d';
  $data_array = array(
    $node->nid,
  );
  db_query($sql, $data_array);

  // Delete the checklist itself
  $sql = 'delete from {ibp_checklist} where id = %d';
  $data_array = array(
    $node->nid,
  );
  db_query($sql, $data_array);
}

/**
* Implementation of hook_menu()
**/
function ibpcl_menu(){
  $items = array();
  // Autocomplete 
  $items['ibpcl/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => 'ibpcl_autocomplete',
  );
  // Listing
  $items['ibpcl/list'] = array(
    'title' => 'Checklists',
    'access arguments' => array('access content'),
    'page callback' => 'ibpcl_listing',
    'type' => MENU_SUGGESTED_ITEM,
  );
  // Clear listing
  $items['ibpcl/list/clear'] = array(
    'title' => 'Checklists',
    'access arguments' => array('access content'),
    'page callback' => 'clear_listing_form',
    'type' => MENU_SUGGESTED_ITEM,
  );


  return $items;
}

/**
* Helper function for autocomplete
**/
function ibpcl_autocomplete($type, $names) {
  //We need to autocomplete only the last state name
  $temp_array = drupal_explode_tags($names);
  $pattern = trim(array_pop($temp_array));
  $matches = array();
  if($pattern != '') {
    $prefix = count($temp_array) ? implode(', ', $temp_array) .', ' : '';
    $sql = '';
    switch($type) {
      case 'states':
        $sql = 'select state from {lyr_116_india_states} where lower(state) like lower(\'%%%s%%\') order by state asc';
        $result = db_query($sql, $pattern);
        while($row = db_fetch_object($result)) {
          $n = $row->state;
          $matches[$prefix . $n ] = $row->state;
        }
        break;
      case 'districts':
        $sql = 'select district from {lyr_105_india_districts} where lower(district) like lower(\'%%%s%%\') order by district asc';
        $result = db_query($sql, $pattern);
        while($row = db_fetch_object($result)) {
          $n = $row->district;
          $matches[$prefix . $n ] = $row->district;
        }
        break;
      case 'taluks':
        $sql = 'select tahsil from {lyr_115_india_tahsils} where lower(tahsil) like lower(\'%%%s%%\') order by tahsil asc';
        $result = db_query($sql, $pattern);
        while($row = db_fetch_object($result)) {
          $n = $row->tahsil;
          $matches[$prefix . $n ] = $row->tahsil;
        }
        break;
      case 'taxa':
        $sql = 'select name from {ibpcl_taxa} where lower(common_name) like lower(\'%%%s%%\') order by name asc';
        $result = db_query($sql, $pattern);
        while($row = db_fetch_object($result)) {
          $n = $row->name;
          $matches[$prefix . $n ] = $row->common_name;
        }
        break;
      default:
        break;
    }

  }
  drupal_json($matches);
}

/**
* Filter form
**/
function ibpcl_filter_form($form_state) {
  $form['filters'] = array(
    '#title' => 'Filters',
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
  );
  $form['filters']['species_search'] = array(
    '#title' => 'Species Search',
    '#type' => 'textfield',
    '#description' => 'Search for species',
    '#default_value' => $_SESSION['filter_species'],
  );
  $form['filters']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Filter',
  );

  $form['filters']['clear'] = array(
    '#value' => '<p><a href="'.base_path().'ibpcl/list/clear">Clear Filters</a></p>',
  );

  return $form;
}

/**
* Function to clear the filter form
**/
function clear_listing_form() {
  $_SESSION['filter_species'] = '';
  drupal_goto('ibpcl/list');
}

/**
* Helper function to get the id of a taxon, given its name
**/
function _get_taxa_id($name) {
  $id = 0;
  $sql = 'select id from ibpcl_taxa where common_name = \'%s\'';
  $data_array = array(
    $name,
  );
  $result = db_query($sql, $data_array);
  while($row = db_fetch_object($result)) {
    $id = $row->id;
  }
  return $id;
}

/**
* Handler for filter form
**/
function ibpcl_filter_form_submit($form, &$form_state) {
  $_SESSION['filter_species'] = $form_state['values']['species_search'];
}

/**
* Function to list checklists
**/
function ibpcl_listing() {

  // Filter form
  $output = '';
  $output .= drupal_get_form('ibpcl_filter_form');

  $selected_ids = array();
  $sql = 'select id from ibp_checklist ';
  $species = $_SESSION['filter_species'];
  if($species != '') {
    $sql .= ' where lower(raw_checklist) like lower(\'%'.$species.'%\')';
  }
  else {

  }
  $sql .= ' order by id desc';
  $result = db_query($sql);
  $raw_ids = array();
  while($row = db_fetch_object($result)) {
    $raw_ids[] = $row->id;
  }
  $nodes = array();
  foreach($raw_ids as $raw_id) {
    $node = node_load($raw_id);
    $nodes[] = $node;
  }


  $output .= '<table class="checklistListing" id="listingTable">';
  $output .= '<thead>';
  $output .= '<th class="taxa">Taxa</th>';
  $output .= '<th class="title">Title</th>';
  $output .= '<th class="license">Geography</th>';
  $output .= '</thead>';
  $output .= '</tbody>';

  $count = 0;

  foreach($nodes as $node) {
    $count++;
    $class = 'odd';
    if($count % 2 == 0) {
      $class='even';
    }
    $output .= '<tr class='.$class.'>';
    $output .= '<td class="taxa">'.$node->taxa.'</td>';
    $output .= '<td class="title"><a href="'.base_path().'node/'.$node->nid.'">'.$node->title."</a></td>";
    $output .= '<td class="license">'. $node->place_name;
    if($node->states) {
      $output .= ' <strong>States</strong>: ' . $node->states;
    }
    if($node->districts) {
      $output .= ' <strong>Districts</strong>: '.$node->districts;
    }
    if($node->taluks) {
      $output .= ' <strong>Taluks</strong>: '.$node->taluks;
    }
    $output .= '</td>';
    $output .= '</tr>';
  }

  $output .= '</tbody>';
  $output .= '</table>';

  return $output;

}

/**
* Helper function to get various ibpcl values
**/
function _ibpcl_get($nid, $var) {
  $value = '';
  $count = 0;
  $sql = 'select count(*) as c from {ibp_checklist} where id = %d';
  $result = db_query($sql, $nid);
  $row = db_fetch_object($result);
  $count = $row->c;
  if($count) {
    switch($var){
      case 'info':
        $sql = 'select info from {ibp_checklist} where id = %d';
        $result = db_query($sql, $nid);
        $row = db_fetch_object($result);
        $value = $row->info;
        break;
      case 'place_name':
        $sql = 'select geography_given_name from {ibp_checklist} where id = %d';
        $result = db_query($sql, $nid);
        $row = db_fetch_object($result);
        $value = $row->geography_given_name;
        break;
      case 'biogeography':
        $sql = 'select region_id from {checklist_regions} where checklist_id = %d';
        $result = db_query($sql, array($nid));
        $value = array();
        while($row = db_fetch_object($result)) {
          $value[] = $row->region_id;
        }
        break;
      case 'states':
        $sql = 'select state_id from {ibp_checklist_states} where checklist_id = %d';
        $result = db_query($sql, array($nid));
        $state_ids = array();
        while($row = db_fetch_object($result)) {
          $state_ids[] = $row->state_id;
        }
        $state_names = array();
        foreach($state_ids as $state_id) {
          $sql = 'select state from {lyr_116_india_states} where __mlocate__id = %d';
          $result = db_query($sql, array($state_id));
          while($row = db_fetch_object($result)){
            $state_names[] = $row->state;
          }
        }
        $value = implode(', ',$state_names);
        break;
      case 'districts':
        $sql = 'select district_id from {ibp_checklist_districts} where checklist_id = %d';
        $result = db_query($sql, array($nid));
        $district_ids = array();
        while($row = db_fetch_object($result)) {
          $district_ids[] = $row->district_id;
        }
        $district_names = array();
        foreach($district_ids as $district_id) {
          $sql = 'select district from {lyr_105_india_districts} where __mlocate__id = %d';
          $result = db_query($sql, array($district_id));
          while($row = db_fetch_object($result)){
            $district_names[] = $row->district;
          }
        }
        $value = implode(', ',$district_names);
        break;
      case 'taluks':
        $sql = 'select taluk_id from {ibp_checklist_taluks} where checklist_id = %d';
        $result = db_query($sql, array($nid));
        $taluk_ids = array();
        while($row = db_fetch_object($result)) {
          $taluk_ids[] = $row->taluk_id;
        }
        $taluk_names = array();
        foreach($taluk_ids as $taluk_id) {
          $sql = 'select tahsil from {lyr_115_india_tahsils} where __mlocate__id = %d';
          $result = db_query($sql, array($taluk_id));
          while($row = db_fetch_object($result)){
            $taluk_names[] = $row->tahsil;
          }
        }
        $value = implode(', ',$taluk_names);
        break;
      case 'from_date':
        $sql = 'select from_date from {ibp_checklist} where id = %d';
        $result = db_query($sql, array($nid));
        while($row = db_fetch_object($result)){
          $value = $row->from_date;
        }
        break;
      case 'to_date':
        $sql = 'select to_date from {ibp_checklist} where id = %d';
        $result = db_query($sql, array($nid));
        while($row = db_fetch_object($result)){
          $value = $row->to_date;
        }
        break;
      case 'publication_date':
        $sql = 'select publication_date from {ibp_checklist} where id = %d';
        $result = db_query($sql, array($nid));
        while($row = db_fetch_object($result)){
          $value = $row->publication_date;
        }
        break;
      case 'biogeography_values':
        $sql = 'select region_id from {checklist_regions} where checklist_id = %d';
        $data_array = array(
          $nid,
        );
        $result = db_query($sql, $data_array);
        $ids = array();
        while($row = db_fetch_object($result)) {
          $ids[] = $row->region_id;
        }
        $names = array();
        foreach($ids as $id) {
          $sql = 'select biogeoprov from {lyr_156_india_biogeographic} where __mlocate__id = %d';
          $data_array = array(
            $id,
          );
          $result = db_query($sql, $data_array);
          while($row = db_fetch_object($result)){
            $names[] = $row->biogeoprov;
          }
        }
        $value = implode($names, ', ');

       break;
      case 'attribution':
        $sql = 'select attribution from {ibp_checklist} where id = %d';
        $result = db_query($sql, array($nid));
        while($row = db_fetch_object($result)){
          $value = $row->attribution;
        }
       break;
      case 'raw_checklist':
        $sql = 'select raw_checklist from {ibp_checklist} where id = %d';
        $result = db_query($sql, array($nid));
        while($row = db_fetch_object($result)){
          $value = $row->raw_checklist;
        }
       break;
      case 'taxa';
        $sql = 'select taxa_id from {checklist_taxa} where checklist_id = %d';
        $result = db_query($sql, array($nid));
        $taxa_ids = array();
        while($row = db_fetch_object($result)){
          $taxa_ids[] = $row->taxa_id;
        }
        $taxa_names = array();
        foreach($taxa_ids as $taxa_id) {
          $sql = 'select common_name from {ibpcl_taxa} where id = %d';
          $result = db_query($sql, array($taxa_id));
          while($row = db_fetch_object($result)) {
            $taxa_names[] = $row->common_name;
          }
        }
        $value = implode(', ', $taxa_names);
        break;
      case 'link':
        $sql = 'select link from {ibp_checklist} where id = %d';
        $result = db_query($sql, array($nid));
        while($row = db_fetch_object($result)) {
          $value = $row->link;
        }
        break;
      default:
        break;
    }
  }
  return $value;
}

/**
* Function to insert ids of things like states, districts, taluks, etc into the checklist table
**/
function _insert_ibpcl_ids($node_id, $name_string, $type) {
  $name_array = explode(',',$name_string);
  if(trim($name_string) != '') {
    switch($type) {
      case 'states':
        foreach($name_array as $name){
          $name = trim($name);
          $result = db_query('select __mlocate__id from {lyr_116_india_states} where state = \'%s\'',$name);
          $state_ids = array();
          while($row = db_fetch_object($result)) {
            $state_ids[] = $row->__mlocate__id;
          }
          foreach($state_ids as $state_id) {
            $sql = 'insert into ibp_checklist_states(checklist_id, state_id) values(%d,%d)';
            db_query($sql, array($node_id, $state_id));
          }
        }
        break;
      case 'districts':
        foreach($name_array as $name){
          $name = trim($name);
          $result = db_query('select __mlocate__id from {lyr_105_india_districts} where district = \'%s\'',$name);
          $district_ids = array();
          while($row = db_fetch_object($result)) {
            $district_ids[] = $row->__mlocate__id;
          }
          foreach($district_ids as $district_id) {
            $sql = 'insert into ibp_checklist_districts(checklist_id, district_id) values(%d,%d)';
            db_query($sql, array($node_id, $district_id));
          }
        }
        break;
      case 'taluks':
        foreach($name_array as $name){
          $name = trim($name);
          $result = db_query('select __mlocate__id from {lyr_115_india_tahsils} where tahsil = \'%s\'',$name);
          $taluk_ids = array();
          while($row = db_fetch_object($result)) {
            $taluk_ids[] = $row->__mlocate__id;
          }
          foreach($taluk_ids as $taluk_id) {
            $sql = 'insert into ibp_checklist_taluks(checklist_id, taluk_id) values(%d,%d)';
            db_query($sql, array($node_id, $taluk_id));
          }
        }
        break;
      case 'taxa':
        foreach($name_array as $name){
          $name = trim($name);
          $result = db_query('select id from {ibpcl_taxa} where common_name = \'%s\'',$name);
          $taxa_ids = array();
          while($row = db_fetch_object($result)) {
            $taxa_ids[] = $row->id;
          }
          foreach($taxa_ids as $taxa_id) {
            $sql = 'insert into checklist_taxa(checklist_id, taxa_id) values(%d,%d)';
            db_query($sql, array($node_id, $taxa_id));
          }
        }
        break;
      default:
        break;
    }
  }

}

/**
* Helper function to insert a checklist
**/
function _ibpcl_insert_checklist($node, $raw_checklist){
  $csv = new parseCSV();
  $csv->auto($raw_checklist);
  $has_scientific_name = FALSE;
  foreach($csv->titles as $sl=>$values) {
    if($values == 'scientific_name') {
      $has_scientific_name = TRUE;
    }
  }

  // We parse only if there is a scientific name
  $new_csv = array();
  $new_csv[] = $csv->titles;
  if($has_scientific_name) {
    foreach($csv->data as $key=>$row) {
      $values = array();
      foreach($row as $k=>$value) {
        if($k == 'scientific_name') {
          $found = FALSE;

          // Birds
          if(! $found) {
            
            $sql = 'select ibp_id from birdspecies_list where lower(ibp_scientific_name) = lower(\'%s\') or lower(itis_scientific_name) = lower(\'%s\') or lower(iucn_2010_scientific_name) = lower(\'%s\') or lower(wikipedia_nov2010_scientific_name) = lower(\'%s\') or lower(sibley_monroe_1996_scientific_name) = lower(\'%s\') or lower(howardandmoore_3rded_scientific_name) = lower(\'%s\') or lower(clements_5thed_2005_scientific_name) = lower(\'%s\') or lower(clements_6thed_2009_scientific_name) = lower(\'%s\') or lower(ioc_2009_scientific_name) = lower(\'%s\') or lower(ebird_2010_scientific_name) = lower(\'%s\') or lower(obc_2001_scientific_name) = lower(\'%s\')';
            $data_array = array(
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/birdspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }
          // Butterflies
          if(! $found) {
            $sql = 'select ibp_id from butterflyspecies_list where lower(wikipedia_scientific_name) = lower(\'%s\')';
            $data_array = array(
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/butterflyspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }

          // Fish
          if(! $found) {
            $sql = 'select ibp_id from fishspecies_list where lower(species) = lower(\'%s\')';
            $data_array = array(
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/fishspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }

          // Plants
          if(! $found) {
            $sql = 'select ibp_id from plantspecies_list where lower(gbif_species) = lower(\'%s\') or lower(iucn_spcscientificname) = lower(\'%s\') ';
            $data_array = array(
              $value,
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/plantspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }

          // Still not found? We'll italicize anyway
          if(! $found) {
            $value = '<em>'.$value.'</em>';
          }
            
        }
        $values[] = $value;
      }
      $new_csv[] = $values;
    }

  }
  $save = '';
  $new_output = new parseCSV();
  if($has_scientific_name) {
    $save = $new_output->output(null,$new_csv,FALSE);
  }
  else {
    $save = $raw_checklist;
  }

  return $save;
}

/**
* Helper function to display a raw checklist
**/
function _ibpcl_raw_checklist($nid) {
  $sql = 'select processed_checklist from {ibp_checklist} where id = %d';
  $data_array = array(
    $nid,
  );
  $row = db_fetch_object(db_query($sql, $data_array));
  $raw_checklist = $row->processed_checklist;
  $csv = new parseCSV(); 
  $csv->auto($raw_checklist);

  $content = '<table border="0" cellspacing="1" cellpadding="3" id="checklistTable">';
  $content .=	'<tr>';
  foreach ($csv->titles as $value) {
    $content .=	'	<th>' .$value . '</th>';
	}
  $content.= '</tr>';
	foreach ($csv->data as $key => $row) {
    $content .= '<tr>';
    foreach ($row as $sl=>$value) {
      $content .= '<td>'.$value.'</td>';
    }
    $content .= '</tr>';
  }
  $content .= '</table>';
  return $content;

}


/**
* Helper function to insert biogeographic regions
**/
function _ibpcl_insert_biogeography($node_id, $biogeography) {
  foreach($biogeography as $key=>$value){
    $sql = 'insert into {checklist_regions} (checklist_id, region_id) values(%d, %d)';
    $data_array = array(
      $node_id,
      $key,
    );
    db_query($sql, $data_array);
  }
}

/**
* Helper function to get a cc license name, given the id
**/
function _get_license_name($cid, $image = FALSE){
  $sql = 'select name from ibp_cc_types where id = %d';
  $data_array = array(
    $cid,
  );
  $result = db_query($sql, $data_array);
  while($row = db_fetch_object($result)) {
    $name = $row->name;
  }
  return $name;
}

/**
* Helper function to get the resource tables
**/
function _get_resource_tables(){
  $sql = 'select * from {ibp_resource_tables}';
  $tables = array();
  $result = db_query($sql);
  while($row = db_fetch_object($result)) {
    $tables[$row->id] = $row->name;
  }
  return $tables;
}

/**
* Helper function to insert table ids
**/
function _ibpcl_insert_tables($nid, $tables){
  foreach($tables as $table) {
    $sql = 'insert into {ibp_checklist_tables}(checklist_id, table_id) values(%d, %d)';
    $data_array = array(
      $nid,
      $table,
    );
    db_query($sql, $data_array);
  }
}

/**
* Helper function to get the global resource tables for a node
**/
function _ibpcl_get_tables_for_node($nid) {
  $table_ids = array();
  $tables = array();
  $sql = 'select * from {ibp_checklist_tables} where checklist_id = %d';
  $data_array = array(
    $nid,
  );
  $result = db_query($sql, $data_array);
  while($row = db_fetch_object($result)){
    $table_ids[] = $row->table_id;
  }
  foreach($table_ids as $table_id) {
    $sql = 'select name from {ibp_resource_tables} where id = %d';
    $data_array = array(
      $table_id,
    );
    while($row = db_fetch_object($result)) {
      $tables[$table_id] = $row->name;
    }
  }
  return $tables;
}
/**
* Function to retrieve the human readable names from the taxa table
**/
function _ibpcl_get_taxa_names() {
  // Store a key value pair of scientific name vs human readable name
  $taxa = array();

  $sql = 'select name, common_name from ibpcl_taxa ORDER by common_name ASC';
  $result = db_query($sql);
  while($row = db_fetch_object($result)) {
    $taxa[$row->common_name] = $row->common_name . ' ('.$row->name.')';
  }
  return $taxa;
}

/**
* Function to retrieve the image from the taxa table
**/
function _ibpcl_get_taxa_icon($taxa_id) {
  $taxa = '';
  $sql = 'select id, name, common_name, image from ibpcl_taxa where id = %d';
  $data_array = array(
    $taxa_id,
  );
  $result = db_query($sql, $data_array);
  while($row = db_fetch_object($result)) {
    $taxa = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/taxa/'.$row->image.'" alt="'.$row->common_name.'"/>';
  }
  return $taxa;
}

/**
* Function to show a license given its id
**/
function _show_license($license_id) {
  $display = '&nbsp;';
  switch($license_id) {
    case 1:
      $display = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/1.png" alt="">';
      break;
    case 2:
      $display = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/2.png" alt="">';
      break;
    case 3:
      $display = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/3.png" alt="">';
      break;
    case 4:
      $display = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/4.png" alt="">';
      break;
    case 5:
      $display = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/5.png" alt="">';
      break;
    case 6:
      $display = '<img src="'.base_path().drupal_get_path('module','ibpcl').'/images/6.png" alt="">';
      break;
    default:
      break;
  }
  return $display;
}

