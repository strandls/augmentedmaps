<?php

module_load_include('inc', 'ibpcl', 'parsecsv');
module_load_include('inc', 'ibpcl', 'fpdf');
drupal_add_css(drupal_get_path('module','ibpcl'). '/ibpcl.css');
drupal_add_js(drupal_get_path('module', 'ibpcl') .'/scripts/jquery.dataTables.js');
drupal_add_js(drupal_get_path('module', 'ibpcl') .'/scripts/ibpcl.js');

/**
 * implementing hook_user
 * This is a temporary implementation to disallow users to login to the staging
 */
/*
function ibpcl_user($op, &$edit, &$account, $category = NULL) {
   switch($op) {
      //Only allow the dev team to login
      case 'login':
           global $user;
           $roles = $user->roles;
           if(array_key_exists(841, $user->roles))
                 $_REQUEST['destination'] = 'user';
           else
                 $_REQUEST['destination'] = 'logout';
           break;
      default:
           //$_REQUEST['destination'] = 'logout';
           break;
     }    
}
*/

/**
 * Function for formatting the output of CCK fields
 * taxa, states, districts, taluks
 * Can be called directly from Contemplate, views related to Checklists
 */
function format_output($field_data)  {
  $output = '';
  $count = count((array)$field_data);
  $index = 0;

  foreach ((array)$field_data as $item) { 
    $pos = strpos($item['view'], ' (');
    if($pos == false)
       $output .= ucwords(strtolower($item['view']));
    else
       $output .= substr($item['view'], 0, $pos);
    $index += 1;
    if($index != $count)
      $output .= ', '; 
  }
  return $output;   
}

/**
 * Returns a map of id vs name of the States
 * Right now these are picked up from the india states layer 
 */
function getStatesMap()  {
  static $states;
  
  if(!isset($states))  {
    //Get the id, state from the India states layer table
    $sql = "select __mlocate__id, state from {lyr_116_india_states} order by state asc";
    $result = db_query($sql);

    $states = array();
    //iterate over each row and populate the states Map
    while($row = db_fetch_object($result)) {
      $states[$row->__mlocate__id] = $row->state;
    }
  }  

  return $states;
}

/**
 * Returns a map of id vs name of the Districts
 * Right now these are picked up from the india districts layer 
 */
function getDistrictsMap()  {
  static $districts;

  if(!isset($districts))  {
    //Get the id, district from the districts layer table
    $sql = "select __mlocate__id, district from {lyr_105_india_districts} order by district asc";
    $result = db_query($sql);

    $districts = array();
    //iterate over each row and populate the districts Map
    while($row = db_fetch_object($result)) {
      $districts[$row->__mlocate__id] = $row->district;
    }
  }
  return $districts;
}

/**
 * Returns a map of id vs name of the Tahsils
 * Right now these are picked up from the Tahsils layer 
 */
function getTahsilsMap()  {
  static $tahsils;
  
  if(!isset($tahsils))  {
    //Get the id, state from the Tahsils layer table
    $sql = "select __mlocate__id, tahsil from {lyr_115_india_tahsils} order by tahsil asc";
    $result = db_query($sql);

    $tahsils = array();
    //iterate over each row and populate the states Map
    while($row = db_fetch_object($result)) {
      $tahsils[$row->__mlocate__id] = $row->tahsil;
    }
  }

  return $tahsils;
}


/**
 * Given a raw checklist, return the number of entities present inside it
 */
function getNumEntities($raw_checklist)  {
  $count = isset($raw_checklist)?count(explode("\n", $raw_checklist))-2:-1;
  return $count;
}

/**
* Helper function to get the biogeographic regions
**/
function _get_biogeographic_regions(){
  $regions = array();

  $sql = 'select __mlocate__id, biogeoprov from {lyr_156_india_biogeographic}';
  $result = db_query($sql);
  while($row = db_fetch_array($result)) {
    $regions[$row['__mlocate__id']] = $row['biogeoprov'];
  }

  return $regions;
}

/**
* Helper function to get the CC Licenses
**/
function _get_cc_types(){
  $sql = 'select * from {ibp_cc_types}';
  $result = db_query($sql);
  $cc_types = array();
  while($row = db_fetch_object($result)) {
    $cc_types[$row->id] = $row->name;
  }
  return $cc_types;
}

/**
* Helper function to get the resource tables
**/
function _get_resource_tables(){
  $sql = 'select * from {ibp_resource_tables}';
  $tables = array();
  $result = db_query($sql);
  while($row = db_fetch_object($result)) {
    $tables[$row->id] = $row->name;
  }
  return $tables;
}

/**
* Function to retrieve names to display in the Taxa drop down
**/
function _ibpcl_get_taxa_names() {
  // Store a key value pair of scientific name vs human readable name
  $taxa = array();

  $sql = 'select id, name, common_name from ibpcl_taxa ORDER by common_name ASC';
  $result = db_query($sql);
  while($row = db_fetch_object($result)) {
    $taxa[$row->id] = $row->common_name . ' ('.$row->name.')';
  }
  return $taxa;
}

/*
 * Function to retrieve the human readable names from the taxa table
 */
function getTaxaCommonNames()  {
  // Store a key value pair of scientific name vs human readable name
  static $taxa;

  /* Read taxa, if its not already set */
  if(!isset($taxa))		{ 
    $taxa = array();
    
    $sql = 'select id, common_name from ibpcl_taxa';
    $result = db_query($sql);
    while($row = db_fetch_object($result)) {
       $taxa[$row->id] = $row->common_name;
    }
  }

  return $taxa;
}


/**
 * Implementation of hook_form_alter
 */
function ibpcl_form_alter(&$form, $form_state, $form_id) {
 if($form["#node"]->type == "checklist") {
   //Add handlers for validation, submit of form
   $form['#validate'][] = 'checklist_validate';
   $form['#submit'][] = 'checklist_submit';
 }
}

/**
 * hook views_exposed_form_alter
 * Unset the extra fields
 */
/*
function ibpcl_form_views_exposed_form_alter(&$form, $form_state) {
   if($form_state['view']->name == "checklists")		{
        print_r($form['#info']);
	unset($form['#info']['filter-field_districts_value']);
	unset($form['#info']['filter-field_states_value']);
	unset($form['#info']['filter-field_taluks_value']);
        print $form['submit']['#value'];
   }
 
}
*/

/*
 * Handler for Validation
 * Any rules for validating the checklist can come in here 
 */
function checklist_validate($form, &$form_state) {
  print "Checklist validation";
}

//Submit handler for Checklist
function checklist_submit($form, &$form_state) {

  //print_r($form_state['values']);
  //print_r($form);
  //get the raw checklist
  $raw_checklist = $form_state['values']['field_rawchecklist'][0]['value'];

  //create a processed checklist, when user submits the form
  $form_state['values']['field_processedchecklist'][0] = array(
	'format' => 2,
	'value' => content_display_checklist(get_processed_checklist($raw_checklist)),
  );

  //compute the number of Species during submission of Checklist
  $form_state['values']['field_numentities'][0] = array(
        'value' => getNumEntities($raw_checklist),
  );


 /**
  * Add new Taxonomy terms during submission of Checklist
  * Pick the taxonomy terms from taxa, state, district, taluk
  * Biogeographic region also needs to be picked up and added as a tag
  * This part of the code makes sense only if we have a Vocabulary linked with Checklist
  * and we are expecting some tags to be picked up automatically and shown in the tag cloud
  */ 
  //Start collecting tags
  $tags = '';
  
  if(isset($form_state['values']['field_place'][0]['value']))
       $tags .= tagPlaceName($form_state['values']['field_place'][0]['value']);
  //Add tags, picking up Taxa, States, Districts, biogeography
  //Tags corresponding to Taxa needs to be stored seperately
  $tags_taxa = getTags($form_state['values']['field_taxa'], getTaxaCommonNames());

  $tags .= getTags($form_state['values']['field_states'], getStatesMap());
  $tags .= getTags($form_state['values']['field_districts'], getDistrictsMap());
  $tags .= getTags($form_state['values']['field_taluks'], getTahsilsMap());

  $terms = $form_state['values']['taxonomy'];
  $vid = 5;
   
  //If empty, handle it
  if(!isset($terms['tags']) || !isset($terms['tags'][$vid]))
     $terms = array("tags" => $vid);

  //print_r($form_state['values']['field_place'][0]['value']);
  //No choice than hard coding the vocabulary id?
  $form_state['values']['taxonomy'] = array('tags' => array($vid => $terms['tags'][$vid].','.$tags,  6 => $tags_taxa)); 
}

/**
 * Tags to add for Place Names
 * No need of adding complete Place name as a Tag
 * If place name contains 'Wild life Sanctuary' or 'National Park', then add these tags
 */ 
function tagPlaceName($place_name)  {
   $tag = '';
   $pos = stripos($place_name, 'Wildlife Sanctuary');
   if($pos != false)
	$tag .= 'Wildlife Sanctuary' . ',' ;
   
   $pos = stripos($place_name, 'National Park');
   if($pos != false)
	$tag .= 'National Park' . ',';

   return $tag;
}

/**
 * Go over $array1, fetch values from it and considering it as key in $array2,
 * return values from $array2
 */
function getTags($dropdown, $values)   {
   $resultString = '';
   foreach ($dropdown as $key => $value)
     if(isset($value['value']) && isset($values[$value['value']]))
        $resultString .= ucwords(strtolower($values[$value['value']])) . ',';
   return $resultString;
}

//Node id is required during creation of csv file, so do this post save
function ibpcl_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)     {
  switch($op) {
     case 'insert':
     case 'update':
        //print_r($node);
 	createCsvFile($node);
        break;      
  }
}

/**
* Helper function to insert a checklist
**/
function get_processed_checklist($raw_checklist){
  $csv = new parseCSV();
  $csv->auto($raw_checklist);
  $has_scientific_name = FALSE;
  foreach($csv->titles as $sl=>$values) {
    if($values == 'scientific_name') {
      $has_scientific_name = TRUE;
    }
  }

  // We parse only if there is a scientific name
  $new_csv = array();
  $new_csv[] = $csv->titles;
  if($has_scientific_name) {
    foreach($csv->data as $key=>$row) {
      $values = array();
      foreach($row as $k=>$value) {
        if($k == 'scientific_name') {
          $found = FALSE;

          // Birds
          if(! $found) {
            
            $sql = 'select ibp_id from birdspecies_list where lower(ibp_scientific_name) = lower(\'%s\') or lower(itis_scientific_name) = lower(\'%s\') or lower(iucn_2010_scientific_name) = lower(\'%s\') or lower(wikipedia_nov2010_scientific_name) = lower(\'%s\') or lower(sibley_monroe_1996_scientific_name) = lower(\'%s\') or lower(howardandmoore_3rded_scientific_name) = lower(\'%s\') or lower(clements_5thed_2005_scientific_name) = lower(\'%s\') or lower(clements_6thed_2009_scientific_name) = lower(\'%s\') or lower(ioc_2009_scientific_name) = lower(\'%s\') or lower(ebird_2010_scientific_name) = lower(\'%s\') or lower(obc_2001_scientific_name) = lower(\'%s\')';
            $data_array = array(
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/birdspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }
          // Butterflies
          if(! $found) {
            $sql = 'select ibp_id from butterflyspecies_list where lower(wikipedia_scientific_name) = lower(\'%s\')';
            $data_array = array(
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/butterflyspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }

          // Fish
          if(! $found) {
            $sql = 'select ibp_id from fishspecies_list where lower(species) = lower(\'%s\')';
            $data_array = array(
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/fishspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }

          // Plants
          if(! $found) {
            $sql = 'select ibp_id from plantspecies_list where lower(gbif_species) = lower(\'%s\') or lower(iucn_spcscientificname) = lower(\'%s\') ';
            $data_array = array(
              $value,
              $value,
            );
            $result = db_query($sql, $data_array);
            while($row = db_fetch_object($result)) {
              $found = TRUE;
              $value = '<em><a href="'.base_path().'species/plantspecies_list/'.$row->ibp_id.'">'.$value.'</a></em>';
            }
          }

          // Still not found? We'll italicize anyway
          if(! $found) {
            $value = '<em>'.$value.'</em>';
          }
            
        }
        $values[] = $value;
      }
      $new_csv[] = $values;
    }

  }

  $processed_checklist = '';
  $new_output = new parseCSV();
  if($has_scientific_name) {
    $processed_checklist = $new_output->output(null,$new_csv,FALSE);
  }
  else {
    $processed_checklist = $raw_checklist;
  }
//  print "<script>alert('test');</script>";

  return $processed_checklist;
}

/**
 * Helper function to display a raw checklist
 * If its available, one can pass the processed_checklist directly to this function
 **/
function content_display_checklist($processed_checklist = 0) {
  $csv = new parseCSV();
  $csv->auto($processed_checklist);

  $content = '<table border="0" cellspacing="1" cellpadding="3" id="checklistTable">';
  $content .=   '<tr>';
  foreach ($csv->titles as $value) {
    $content .= '       <th>' .$value . '</th>';
        }
  $content.= '</tr>';
        foreach ($csv->data as $key => $row) {
    $content .= '<tr>';
    foreach ($row as $sl=>$value) {
      $content .= '<td>'.$value.'</td>';
    }
    $content .= '</tr>';
  }
  $content .= '</table>';
  return $content;
}

/**
 * Right now we save CSV files on the server, just to be able to provide options to download as CSV, PDF 
 * Need to check if we can remove creation of csv files on the server,
 */
function createCsvFile($node)  {
  //query for the raw checklist value
  $rawchecklist = db_result(db_query("select field_rawchecklist_value from {content_type_checklist} where nid = %d",$node->nid));  

  // Check if there is a CSV file, if not, we'll create one
  if(! file_scan_directory(file_directory_path().'/checklists/csv','checklist_'.$node->nid.'.csv')) {
    $csv = new parseCSV();
    $csv->auto($rawchecklist);
    $csv->save(file_directory_path().'/checklists/csv/checklist_'.$node->nid.'.csv');
  }
  else
  {
    unlink(file_directory_path().'/checklists/csv','checklist_'.$node->nid.'.csv');
    $csv = new parseCSV();
    $csv->auto($rawchecklist);
    $csv->save(file_directory_path().'/checklists/csv/checklist_'.$node->nid.'.csv');
  }
}











function no_of_cl()
{
  $sql = 'select count(id) as clcount from {ibp_checklist}';
  $result = db_query($sql);
  $row = db_fetch_object($result);
  $ret_str = '<strong>Checklists: </strong><a href=\'ibpcl/list\'>'.$row->clcount.'</a>';
  return $ret_str;
} 





