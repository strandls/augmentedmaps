<?php
//This module holds all the utility methods, required for the wgp code

 // LOG All the mails going out from portal
/**
* Implementation of hook_mail_alter().
*
* @param $message A structured array containing the message to be altered. keys in this array include: id, to, subject, body, from, headers
*/
function wgp_utils_mail_alter(&$message) {
//dd($message);
$subject = $message['subject'];

$output = "                   *************** MAIL STARTS *************              \n";
$output = $output.'ID :- '.$message['id']."\n";
$output = $output.'FROM :- '.$message['from']."\n";
$output = $output.'TO :- '.$message['to']."\n";
$output = $output.'SUBJECT :- '.$subject."\n";
$output = $output.'BODY :- '.implode("\n",$message['body'])."\n";

/* If the mail is related to accoutn details, just log, but dont keep complete mail in the logs as the mail can oontain wensitive information */
if(strpos($message['subject'], 'Account details')!=false || strpos($message['subject'], 'login information') != false)
  $output = $subject."\n";

$output = $output."                   ************* MAIL ENDS ***************               \n";

$from = check_plain($message['from']);
$logfile = "/tmp/mail_log/".$from;

if (!$handle = fopen($logfile, 'a')) {
    watchdog('mail_log', 'Cannot open log file %file', array('%file' => $logfile), WATCHDOG_ERROR);
    return FALSE;
  }
  if (fwrite($handle, $output) === FALSE) {
    watchdog('mail_log', 'Cannot write log file %file', array('%file' => $logfile), WATCHDOG_ERROR);
    return FALSE;
  }

  fclose($handle);

}


//Path URLs to address
function wgp_utils_menu()   {
 // Search
 $items['search_custom'] = array(
    'title' => 'Sarch HACKED',
    'access arguments' => array('access content'),
    'page callback' => 'search_custom',
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['search_custom/%/%'] = array(
    'title' => 'Sarch HACKED',
    'access arguments' => array('access content'),
    'page callback' => 'search_display',
    'page arguments' => array(1,2),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Custom search form implementation
 */
function search_custom_form() {
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#size' => '20',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );
//  $form['#validate'] = 'search_custom_form_validate';
  return $form;
}

//validate handler
function search_custom_form_validate($form, &$form_state) {
  if ($form_state['values']['keyword'] == '') {
    form_set_error('keyword', t('Please enter some keyword to search.'));
  }
}

function search_custom_form_submit($form, &$form_state) {
  global $base_url;
  $keyword = check_plain($form_state['values']['keyword']);
  if(strlen($keyword)>=3)
       drupal_goto($base_url."/search_custom/node/".$keyword);
  else
       form_set_error('keyword', t('Enter three positive characters to search.'));
}


//Page callback for search_custom
function search_custom(){
  return (drupal_get_form("search_custom_form"));
}

/**
 * Display of custom search results
 */
function search_display($type, $keyword){
  
  $output = search_data($keyword, $type);
  if(!isset($output))
     $output = "Your search yielded no results";
  return ($output);
  /*
  $output = "<h2> Search Results </h2> <br/>";
  $searchResults = do_search($keyword, $type);
  foreach($searchResults as $result)
  {
     //the 'sid' is actually a node id.
     $nid = $result->sid;
     $node = node_load($nid);
     $output = $output."<a href=$base_url/node/$nid>$node->title</a>"."<br/>";
   }
   //$output = search_excerpt($keyword, $output);
   return ($output);
*/
}

