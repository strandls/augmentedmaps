<?php
//This module holds all the utility methods, required for the wgp code

/**
 * function to return the links to be placed for browsing between nodes
 * else return link to the next/previous node of the same type
 * direction can be next/prev
 */
function get_browse_link($nid, $type, $direction = "next", $text="Next") {
   $rnid = 0;
   //GET THE required node id, based on the direction to browse
   if($direction=="prev")   
     $rnid = db_result(db_query('SELECT nid from {node} where nid < %d and type = \'%s\' ORDER by nid DESC', $nid, $type));
   else
     $rnid = db_result(db_query('SELECT nid from {node} where nid > %d and type=\'%s\' ORDER by nid ASC', $nid, $type));
   
   //Show human readable URL, if its there.
   $path_alias = db_result(db_query('SELECT dst from {url_alias} where src = \'node/%d\'',$rnid));
   //print $path_alias;
   //THIS SHOULD BE EMPTY BY DEFAULT
   $link = "<p>$text</p>";
   //IF THERE IS A NODE TO BROWSE TO, THEN POPULATE THE LINK, ELSE LEAVE IT EMPTY
   if($rnid > 0)          {

       global $_domain;
       $active = $_domain['domain_id'];
       $domain_lookup = domain_get_node_domains($rnid);
       //if accessible in this domain 
        if(in_array($active, $domain_lookup["domain_id"]) || $domain_lookup['domain_site'] == 1)     {
           //ALIAS IS THERE FOR THE URL
      	    if($path_alias)
      		$link = "<a href=\"$base_url/$path_alias\">$text</a>";
      	    else 
      		$link = "<a href=\"$base_url/node/$rnid\">$text</a>";
         }
         else
              return get_browse_link($rnid, $type, $direction, $text);
   }
   return $link;
}

/**
 * Given a node id, returens the teaser
 * Used in showing teasers inside front page
 */
function get_teaser($nid)          {
     $node = node_load($nid);
     return node_teaser(strip_tags($node->body), $format = NULL, $size = 500);
}

//form_alter for testing purposes
//function wgp_utils_form_alter(&$form, &$form_state, $form_id)        {
                    //print_r($form);
//}

//Path URLs to address
function wgp_utils_menu()   {
 // Search
 $items['search_custom'] = array(
    'title' => 'Sarch HACKED',
    'access arguments' => array('access content'),
    'page callback' => 'search_custom',
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['search_custom/%/%'] = array(
    'title' => 'Sarch HACKED',
    'access arguments' => array('access content'),
    'page callback' => 'search_display',
    'page arguments' => array(1,2),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
* Implementation of hook_mail_alter().
*
* @param $message A structured array containing the message to be altered. keys in this array include: id, to, subject, body, from, headers
*/
function wgp_utils_mail_alter(&$message) {
 // LOG All the mails going out from portal
//dsfdsfdsf
//dd($message);
$subject = $message['subject']."\n";

$output = "                   *************** MAIL STARTS *************              \n";
$output = $output.'ID :- '.$message['id']."\n";
$output = $output.'FROM :- '.$message['from']."\n";
$output = $output.'TO :- '.$message['to']."\n";
$output = $output.'SUBJECT :- '.$subject."\n";
$output = $output.'BODY :- '.implode("\n",$message['body'])."\n";

/* If the mail is related to accoutn details, just log, but dont keep complete mail in the logs as the mail can oontain wensitive information */
if(strpos($message['subject'], 'Account details')!=false || strpos($message['subject'], 'Replacement login information') != false)
  $output = $subject."\n";
    
$output = $output.'SUBJECT :- '.$message['subject']."\n";

$output = $output."                   ************* MAIL ENDS ***************               \n";

$from = check_plain($message['from']);
$logfile = "/data/portal_mail_log/".$from;

if (!$handle = fopen($logfile, 'a')) {
    watchdog('mail_log', 'Cannot open log file %file', array('%file' => $logfile), WATCHDOG_ERROR);
    return FALSE;
  }
  if (fwrite($handle, $output) === FALSE) {
    watchdog('mail_log', 'Cannot write log file %file', array('%file' => $logfile), WATCHDOG_ERROR);
    return FALSE;
  }

  fclose($handle);

}

/**
 * Custom search form implementation
 */
function search_custom_form() {
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#size' => '20',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );
//  $form['#validate'] = 'search_custom_form_validate';
  return $form;
}

//validate handler
function search_custom_form_validate($form, &$form_state) {
  if ($form_state['values']['keyword'] == '') {
    form_set_error('keyword', t('Please enter some keyword to search.'));
  }
}

function search_custom_form_submit($form, &$form_state) {
  global $base_url;
  $keyword = check_plain($form_state['values']['keyword']);
  if(strlen($keyword)>=3)
       drupal_goto($base_url."/search_custom/node/".$keyword);
  else
       form_set_error('keyword', t('Enter three positive characters to search.'));
}


//Page callback for search_custom
function search_custom(){
  return (drupal_get_form("search_custom_form"));
}

/**
 * Display of custom search results
 */
function search_display($type, $keyword){
  $output = search_data($keyword, $type);
  if(!isset($output))
     $output = "Your search yielded no results";
  return ($output);
}

/**
 * Function to return the names from a layer table
 * One needs to pass the layer table name,
 * name of column, which needs to be considered as name column
 * Ex usage:- get_names("name", "lyr_171_india_tigerreserves")
 *         get_names("areaname", "lyr_85_india_papoints")
 **/
function get_names($column, $table)         {
  $names = array();
  $sql = "SELECT $column as name from {$table}";
  $result = db_query($sql);
  while($row = db_fetch_object($result)) {
      $names[] = $row->name;
  }
  return $names;
}
